services:
  postgresdb:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: certificate
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main-network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - main-network

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - main-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=mLekyz-kTSMd97oZbIEt
    deploy:
      resources:
        limits:
          memory: 1g
    networks:
      - main-network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # UI port for web page
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main-network

  certificate-app:
    depends_on:
      - postgresdb
      - redis
      - kafka
      - rabbitmq
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "9593:9593"
    networks:
      - main-network

  log-consumer-service:
    depends_on:
      - kafka
      - elasticsearch
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    networks:
      - main-network

volumes:
  db:
  certificate-logs:

networks:
  main-network:
    driver: bridge










#Without Rabbit MQ Configuration
#services:
#  postgresdb:
#    image: postgres:16-alpine
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      POSTGRES_DB: certificate
#    ports:
#      - "5432:5432"
#    volumes:
#      - db:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks:
#      - main-network
#
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    networks:
#      - main-network
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.4.1
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    networks:
#      - main-network
#
#  kafka:
#    image: confluentinc/cp-kafka:7.4.1
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    networks:
#      - main-network
#
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
#    ports:
#      - "9200:9200"
#    environment:
#      - discovery.type=single-node
#      - ELASTIC_PASSWORD=mLekyz-kTSMd97oZbIEt
#    deploy:
#      resources:
#        limits:
#          memory: 1g
#    networks:
#      - main-network
#
#  certificate-app:
#    depends_on:
#      - postgresdb
#      - redis
#      - kafka
#    build:
#      context: ./backend
#      dockerfile: Dockerfile
#    ports:
#      - "9593:9593"
#    networks:
#      - main-network
#
#  log-consumer-service:
#    depends_on:
#      - kafka
#      - elasticsearch
#    build:
#      context: ./log-consumer
#      dockerfile: Dockerfile
#    ports:
#      - "8091:8091"
#    networks:
#      - main-network
#
#volumes:
#  db:
#  certificate-logs:
#
#networks:
#  main-network:
#    driver: bridge











##version: '3.8'
#
#services:
#  postgresdb:
#    image: postgres:16-alpine
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      POSTGRES_DB: certificate
#    ports:
#      - "5432:5432"
#    volumes:
#      - db:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.4.1
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:7.4.1
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
#    ports:
#      - "9200:9200"
#    environment:
#      - discovery.type=single-node
#      - ELASTIC_PASSWORD=mLekyz-kTSMd97oZbIEt
#    deploy:
#      resources:
#        limits:
#          memory: 1g
#
#  certificate-app:
#    depends_on:
#      - postgresdb
#      - redis
#      - kafka
#    external_links:
#      - certificate_app_net
#    networks:
#      - default
#
#  log-consumer-service:
#    depends_on:
#      - kafka
#      - elasticsearch
#    external_links:
#      - log_consumer_net
#    networks:
#      - default
#
#volumes:
#  db:
#  certificate-logs:
#
#networks:
#  default:
#    name: main-network
#
#
#
#







##version: '3.8'
#
#services:
#  postgresdb:
#    image: postgres:16-alpine
#    restart: unless-stopped
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: root
#      POSTGRES_DB: certificate
#    ports:
#      - "5432:5432"
#    volumes:
#      - db:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "postgres"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.4.1
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#
#  kafka:
#    image: confluentinc/cp-kafka:7.4.1
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
#    ports:
#      - "9200:9200"
#    environment:
#      - discovery.type=single-node
#      - ELASTIC_PASSWORD=mLekyz-kTSMd97oZbIEt
#    deploy:
#      resources:
#        limits:
#          memory: 1g
#
#volumes:
#  db:
#  certificate-logs: