# # version: "3.8"

# # services:
# #   postgresdb:
# #     image: postgres
# #     restart: unless-stopped
# #     env_file: ./.env
# #     environment:
# #       - POSTGRES_USER=$POSTGRESDB_USER
# #       - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
# #       - POSTGRES_DB=$POSTGRESDB_DATABASE
# #     ports:
# #       - "$POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT"
# #     volumes:
# #       - db:/var/lib/postgresql/data  # Corrected volume mount point

# #   app:
# #     depends_on:
# #       - postgresdb
# #     build: ./backend
# #     restart: on-failure
# #     env_file: ./.env
# #     ports:
# #       - "$SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT"
# #     environment:
# #       SPRING_APPLICATION_JSON: |
# #         {
# #           "spring.datasource.url": "jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE",
# #           "spring.datasource.username": "$POSTGRESDB_USER",
# #           "spring.datasource.password": "$POSTGRESDB_ROOT_PASSWORD",
# #           "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.PostgreSQLDialect",
# #           "spring.jpa.hibernate.ddl-auto": "update"
# #         }
# #     volumes:
# #       - .m2:/root/.m2
# #     stdin_open: true
# #     tty: true

# # volumes:
# #   db:



# version: "3.8"

# services:
#   postgresdb:
#     image: postgres
#     restart: unless-stopped
#     env_file: ./.env
#     environment:
#       - POSTGRES_USER=$POSTGRESDB_USER
#       - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
#       - POSTGRES_DB=$POSTGRESDB_DATABASE
#     ports:
#       - "$POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT"
#     volumes:
#       - db:/var/lib/postgresql/data

#   backend:  # Define the backend service before the frontend service
#     depends_on:
#       - postgresdb
#     build: ./backend
#     restart: on-failure
#     env_file: ./.env
#     ports:
#       - "$SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT"
#     environment:
#       SPRING_APPLICATION_JSON: |
#         {
#           "spring.datasource.url": "jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE",
#           "spring.datasource.username": "$POSTGRESDB_USER",
#           "spring.datasource.password": "$POSTGRESDB_ROOT_PASSWORD",
#           "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.PostgreSQLDialect",
#           "spring.jpa.hibernate.ddl-auto": "update"
#         }
#     volumes:
#       - .m2:/root/.m2
#     stdin_open: true
#     tty: true

#   frontend:  # Define the frontend service after the backend service
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "7000:3000"
#     depends_on:
#       - backend  # Ensure that the frontend service depends on the backend service

# volumes:
#   db:


# version: "3.8"

# services:
#   postgresdb:
#     image: postgres
#     restart: unless-stopped
#     env_file: ./.env
#     environment:
#       - POSTGRES_USER=$POSTGRESDB_USER
#       - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
#       - POSTGRES_DB=$POSTGRESDB_DATABASE
#     ports:
#       - "$POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT"
#     volumes:
#       - db:/var/lib/postgresql/data

#   backend:
#     depends_on:
#       - postgresdb
#     build: ./backend
#     restart: on-failure
#     env_file: ./.env
#     ports:
#       - "$SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT"
#     environment:
#       SPRING_APPLICATION_JSON: |
#         {
#           "spring.datasource.url": "jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE",
#           "spring.datasource.username": "$POSTGRESDB_USER",
#           "spring.datasource.password": "$POSTGRESDB_ROOT_PASSWORD",
#           "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.PostgreSQLDialect",
#           "spring.jpa.hibernate.ddl-auto": "update"
#         }
#     volumes:
#       - .m2:/root/.m2
#     stdin_open: true
#     tty: true

#   frontend:
#     depends_on:
#       - backend
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "7000:3000"

#   prometheus:  # New Prometheus service definition
#     image: prom/prometheus:v2.35.0
#     container_name: prometheus
#     restart: unless-stopped
#     volumes:
#       - ./data/prometheus/config:/etc/prometheus/
#     command:
#       - "--config.file=/etc/prometheus/prometheus.yaml"
#     ports:
#       - "9090:9090"

#   grafana:
#     image: grafana/grafana-oss:8.5.2
#     container_name: grafana
#     restart: unless-stopped
#     ports:
#       - "3001:3000"
#     volumes:
#       - ./data/grafana:/var/lib/grafana
#       - ./grafana/provisioning:/etc/grafana/provisioning
#     environment:
#       - GF_SECURITY_ADMIN_PASSWORD=admin
#       - GF_USERS_ALLOW_SIGN_UP=false
#       - GF_SERVER_DOMAIN=localhost
#       - GF_LOG_MODE=console file
#       - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug

# volumes:
#   db:

version: "3.8"

services:
  postgresdb:
    image: postgres
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_USER=$POSTGRESDB_USER
      - POSTGRES_PASSWORD=$POSTGRESDB_ROOT_PASSWORD
      - POSTGRES_DB=$POSTGRESDB_DATABASE
    ports:
      - "$POSTGRESDB_LOCAL_PORT:$POSTGRESDB_DOCKER_PORT"
    volumes:
      - db:/var/lib/postgresql/data

  backend:
    depends_on:
      - postgresdb
    build: ./backend
    restart: on-failure
    env_file: ./.env
    ports:
      - "$SPRING_LOCAL_PORT:$SPRING_DOCKER_PORT"
    environment:
      SPRING_APPLICATION_JSON: |
        {
          "spring.datasource.url": "jdbc:postgresql://postgresdb:$POSTGRESDB_DOCKER_PORT/$POSTGRESDB_DATABASE",
          "spring.datasource.username": "$POSTGRESDB_USER",
          "spring.datasource.password": "$POSTGRESDB_ROOT_PASSWORD",
          "spring.jpa.properties.hibernate.dialect": "org.hibernate.dialect.PostgreSQLDialect",
          "spring.jpa.hibernate.ddl-auto": "update"
        }
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true

  frontend:
    depends_on:
      - backend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "7000:3000"

  prometheus:
    image: prom/prometheus:v2.35.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    # network_mode: host
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    # network_mode: host
    user: root
    ports:
      - "3001:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug

volumes:
  db:
